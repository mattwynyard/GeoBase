[
 {
  "file": "/Users/Matt/XCode/GeoBase/GeoBase/ProjectController.swift",
  "offset": 1503,
  "remove": 9198,
  "text": "try! context.executeFetchRequest(fetch)\n        //println(projectList)\n        navigationController?.toolbarHidden = false\n        tableView.showsVerticalScrollIndicator = true\n        tableView.reloadData()\n        \n        if defaultPath == nil { //no cell selection\n            editButton.enabled = false\n        }\n    }\n    \n    override func viewWillAppear(animated: Bool) {\n        \n        navigationController?.toolbarHidden = false\n        loadData()\n        let defaults = NSUserDefaults.standardUserDefaults()\n        let tableRow = defaults.integerForKey(\"tableRow\")\n        let indexPath = NSIndexPath(forRow: tableRow, inSection: 0)\n        currentCell = tableView.cellForRowAtIndexPath(indexPath) as UITableViewCell!\n        currentCell.accessoryType = .Checkmark\n        currentProject = defaults.stringForKey(\"currentProject\")\n        print(currentProject!)\n        \n        \n        \n        self.tableView.selectRowAtIndexPath(indexPath, animated: true, scrollPosition: UITableViewScrollPosition.None)\n        currentCell.accessoryType = .Checkmark\n        currentCell.selectionStyle = .Blue\n        \n//        if isLocked == nil {\n//            NSUserDefaults.standardUserDefaults().setBool(false, forKey: \"isLocked\")\n//            lockButton.title = \"Lock\"\n//        }\n        \n        isLocked = NSUserDefaults.standardUserDefaults().boolForKey(\"isLocked\")\n        print(isLocked)\n        if isLocked == true {\n            lockButton.title = \"Unlock\"\n        } else {\n            lockButton.title = \"Lock\"\n        }\n\n    }\n\n    override func viewDidAppear(animated: Bool) {\n        \n        //tableView.showsVerticalScrollIndicator = true\n    }\n    \n    override func viewWillDisappear(animated: Bool) {\n    \n        navigationController?.toolbarHidden = true //hide toolbar for other view controllers\n    \n    }\n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    \n    func loadData() { //update to return context\n        \n        //let appDel: AppDelegate = (UIApplication.sharedApplication().delegate as! AppDelegate)\n        let context: NSManagedObjectContext = appDel.managedObjectContext!\n        let fetch = NSFetchRequest(entityName: \"Project\")\n        projectList = try! context.executeFetchRequest(fetch)\n        tableView.reloadData()\n        \n    }\n    \n    /*\n    * Called when row on table view is selected\n    * sets current cell and current project\n    */\n    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath?) {\n        \n        if isLocked {\n            return\n        }\n        \n        let indexPath = tableView.indexPathForSelectedRow;\n        previousCell = currentCell\n        previousCell.accessoryType = .None\n        currentCell = tableView.cellForRowAtIndexPath(indexPath!) as UITableViewCell!;\n        editButton.enabled = true\n        currentCell.accessoryType = .Checkmark\n        currentProject = currentCell.textLabel?.text!\n        print(currentProject!)\n        NSUserDefaults.standardUserDefaults().setInteger(indexPath!.row, forKey: \"tableRow\")\n        NSUserDefaults.standardUserDefaults().setValue(currentProject!, forKey: \"currentProject\")\n        \n    }\n    \n    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        // #warning Potentially incomplete method implementation.\n        // Return the number of sections.\n        return 1\n    }\n    \n    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // #warning Incomplete method implementation.\n        // Return the number of rows in the section.\n        return projectList.count\n    }\n    \n    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath?) -> UITableViewCell {\n        \n        let cell = tableView.dequeueReusableCellWithIdentifier(\"Cell\", forIndexPath: indexPath!) \n        \n        if let ip = indexPath {\n            let data: NSManagedObject = projectList[ip.row] as! NSManagedObject\n            cell.textLabel?.text = data.valueForKeyPath(\"project\") as? String\n            cell.detailTextLabel?.text = data.valueForKeyPath(\"date_created\") as? String\n            //\n        }\n        return cell\n    }\n    \n    // Override to support conditional editing of the table view.\n    override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {\n        \n        return true\n        \n    }\n    \n    /*\n    * sets lock button title and state when pushed and saves state to NSUser defaults\n    */\n    @IBAction func lockButton(sender: AnyObject) {\n        \n        if isLocked == true {\n            lockButton.title = \"Lock\"\n            isLocked = false\n            NSUserDefaults.standardUserDefaults().setBool(false, forKey: \"isLocked\")\n        } else {\n            lockButton.title = \"Unlock\"\n            isLocked = true\n            NSUserDefaults.standardUserDefaults().setBool(true, forKey: \"isLocked\")\n        }\n    }\n    \n    @IBAction func emailData(sender: AnyObject) {\n        \n        let mailComposeViewController = configuredMailComposeViewController()\n        if MFMailComposeViewController.canSendMail() {\n            self.presentViewController(mailComposeViewController, animated: true, completion: nil)\n        } else {\n            self.showSendMailErrorAlert()\n        }\n    }\n    \n    func configuredMailComposeViewController() -> MFMailComposeViewController {\n        \n        let mailComposerVC = MFMailComposeViewController()\n        mailComposerVC.mailComposeDelegate = self // Extremely important to set the --mailComposeDelegate-- property, NOT the --delegate-- property\n        \n        mailComposerVC.setToRecipients([\"mjwynyard.com\"])\n        mailComposerVC.setSubject(\"Sending you an in-app e-mail...\")\n        \n        mailComposerVC.setMessageBody(\"Sending e-mail in-app is not so bad!\", isHTML: false)\n        \n        return mailComposerVC\n    }\n    \n    func showSendMailErrorAlert() {\n        let sendMailErrorAlert = UIAlertView(title: \"Could Not Send Email\", message: \"Your device could not send e-mail.  Please check e-mail configuration and try again.\", delegate: self, cancelButtonTitle: \"OK\")\n        sendMailErrorAlert.show()\n    }\n    \n    // MARK: MFMailComposeViewControllerDelegate Method\n    func mailComposeController(controller: MFMailComposeViewController, didFinishWithResult result: MFMailComposeResult, error: NSError?) {\n        controller.dismissViewControllerAnimated(true, completion: nil)\n    }\n\n    // Override to support editing the table view.\n    override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {\n        \n        if isLocked {\n            return\n        }\n        \n        let appDel: AppDelegate = (UIApplication.sharedApplication().delegate as! AppDelegate)\n        let context: NSManagedObjectContext = appDel.managedObjectContext!\n        let message: String = \"WARNING\\nDo you want to delete this project?\\nAll data related to this project will be deleted permenantly\"\n        let alertController = UIAlertController(title: \"DELETE PROJECT!\", message: message, preferredStyle: .Alert)\n        \n        if editingStyle == .Delete {\n            \n            //if tableView != nil {\n            let cancelAction = UIAlertAction(title: \"Cancel\", style: .Cancel) { (action) in\n                tableView.reloadData()\n                \n            }\n            alertController.addAction(cancelAction)\n            let OKAction = UIAlertAction(title: \"Ok\", style: .Destructive) { (action) in\n                \n                context.deleteObject(self.projectList[indexPath.row] as! NSManagedObject)\n                self.projectList.removeAtIndex(indexPath.row)\n                tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.Fade)\n            }\n            alertController.addAction(OKAction)\n            self.presentViewController(alertController, animated: true)  {\n                \n            }\n            \n        }\n        var error: NSError?\n        do {\n            try context.save()\n        } catch let error1 as NSError {\n            error = error1\n            abort()\n        }\n    }\n    \n    /*\n    // Override to support rearranging the table view.\n    override func tableView(tableView: UITableView, moveRowAtIndexPath fromIndexPath: NSIndexPath, toIndexPath: NSIndexPath) {\n    \n    }\n    */\n    \n    /*\n    // Override to support conditional rearranging of the table view.\n    override func tableView(tableView: UITableView, canMoveRowAtIndexPath indexPath: NSIndexPath) -> Bool {\n    // Return NO if you do not want the item to be re-orderable.\n    return true\n    }\n    */\n    \n    // MARK: - Navigation\n    \n    // In a storyboard-based application, you will often want to do a little preparation before navigation\n    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n        \n        \n        //editButton.enabled = true\n        if segue.identifier == \"Update\" {\n            selection = projectList[self.tableView.indexPathForSelectedRow",
 }
]
